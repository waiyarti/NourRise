/**
 * @file supabaseClient.js
 * @description Client Supabase optimis√© avec gestion robuste des variables d'environnement
 * 
 * Caract√©ristiques:
 * - D√©tection intelligente des variables d'environnement
 * - Gestion d'erreurs avanc√©e et messages explicites
 * - Support du mode d√©veloppement vs production
 * - Fallback s√©curis√© pour √©viter les crashs
 * - Options optimis√©es pour la performance et la r√©silience
 */

import { createClient } from '@supabase/supabase-js';

// R√©cup√©ration s√©curis√©e des variables d'environnement
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

// Configuration avanc√©e pour optimiser les performances et la r√©silience
const supabaseOptions = {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
  },
  realtime: {
    timeout: 30000, // Augmentation du timeout pour les connexions lentes
  },
  global: {
    headers: {
      'x-application-name': 'NourRise',
    },
  },
};

// Fonction pour cr√©er un client mockup en cas d'erreur (mode d√©grad√©)
const createMockClient = () => {
  console.warn('‚ö†Ô∏è Mode d√©grad√© activ√© - Fonctionnalit√©s Supabase limit√©es');
  
  return {
    auth: {
      signIn: () => Promise.resolve({ user: null, error: new Error('Mode hors-ligne') }),
      signUp: () => Promise.resolve({ user: null, error: new Error('Mode hors-ligne') }),
      signOut: () => Promise.resolve({ error: null }),
      getSession: () => Promise.resolve({ data: { session: null }, error: null }),
    },
    from: () => ({
      select: () => ({
        eq: () => ({
          single: () => Promise.resolve({ data: null, error: null }),
        }),
      }),
    }),
    _isOfflineMode: true,
  };
};

// Gestion intelligente de l'initialisation de Supabase
let supabase;

try {
  // V√©rification s√©curis√©e des variables d'environnement
  if (!supabaseUrl || !supabaseAnonKey) {
    // Message d'erreur d√©taill√© pour faciliter le d√©bogage
    const errorMessage = !supabaseUrl && !supabaseAnonKey
      ? "‚ùå Variables d'environnement Supabase manquantes (URL et ANON_KEY)"
      : !supabaseUrl
        ? "‚ùå Variable d'environnement NEXT_PUBLIC_SUPABASE_URL manquante"
        : "‚ùå Variable d'environnement NEXT_PUBLIC_SUPABASE_ANON_KEY manquante";
    
    console.error(errorMessage);
    console.error("üí° Assurez-vous que ces variables sont configur√©es dans votre fichier .env.local et dans les param√®tres Vercel");
    
    // En d√©veloppement, on peut afficher des instructions suppl√©mentaires
    if (process.env.NODE_ENV !== 'production') {
      console.info("üìã Format attendu dans .env.local:");
      console.info("NEXT_PUBLIC_SUPABASE_URL=https://votre-projet.supabase.co");
      console.info("NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGci...votre-cl√©-ici");
    }
    
    // En production, cr√©er un client mockup pour √©viter les crashs dans les pages
    if (typeof window !== 'undefined') {
      supabase = createMockClient();
    } else {
      // En mode SSR/build sans les variables, on doit lever une erreur pour alerter
      throw new Error(errorMessage);
    }
  } else {
    // Initialisation normale du client Supabase avec toutes les options
    supabase = createClient(supabaseUrl, supabaseAnonKey, supabaseOptions);
    
    // Log de succ√®s (uniquement en d√©veloppement)
    if (process.env.NODE_ENV !== 'production') {
      console.info("‚úÖ Client Supabase initialis√© avec succ√®s");
    }
  }
} catch (error) {
  console.error("‚ùå Erreur lors de l'initialisation de Supabase:", error.message);
  
  // En cas d'erreur c√¥t√© client, utiliser le client mockup
  if (typeof window !== 'undefined') {
    supabase = createMockClient();
  } else {
    // En mode SSR, propager l'erreur pour alerter
    throw error;
  }
}

/**
 * V√©rifie si Supabase est correctement configur√©
 * @returns {boolean} √âtat de la configuration
 */
export const isSupabaseConfigured = () => {
  return !!supabaseUrl && !!supabaseAnonKey && !supabase._isOfflineMode;
};

/**
 * V√©rifie si la connexion √† Supabase est active
 * @returns {Promise<boolean>} √âtat de la connexion
 */
export const checkSupabaseConnection = async () => {
  if (!isSupabaseConfigured()) return false;
  
  try {
    // Test l√©ger pour v√©rifier la connexion
    const { error } = await supabase.from('health_check').select('count', { count: 'exact', head: true }).limit(1);
    return !error;
  } catch (error) {
    console.warn("‚ö†Ô∏è V√©rification de connexion Supabase √©chou√©e:", error.message);
    return false;
  }
};

// Exporter le client et les utilitaires
export { supabase };
