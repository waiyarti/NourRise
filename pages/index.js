import { useState, useEffect, useRef, useMemo, useCallback } from "react";
import { format, isSameDay, addDays, isAfter, isBefore, startOfDay, parseISO, differenceInDays } from "date-fns";
import { fr } from "date-fns/locale";
import AnalyseIA from "../composants/AnalyseIA";
import GraphiqueEvolution from "../composants/GraphiqueEvolution";
import GraphiqueNote from "../composants/GraphiqueNote";
import { supabase } from "../supabaseClient";
import { useRouter } from "next/router";
import Head from "next/head";
import { 
  FiAward, FiTrendingUp, FiZap, FiCheck, FiClock, FiX, FiFire, 
  FiStar, FiHeart, FiAperture, FiPlus, FiCalendar, FiCheckCircle,
  FiBarChart2, FiSettings, FiLogOut, FiUser, FiRefreshCw, FiEye,
  FiEyeOff, FiAlertCircle, FiChevronDown, FiChevronUp, FiShare2, 
  FiBookmark, FiShield, FiTrendingDown, FiSave, FiActivity, FiSun, FiMoon
} from "react-icons/fi";
import { motion, AnimatePresence } from "framer-motion";
import confetti from 'canvas-confetti';
import Lottie from "react-lottie-player";
import loadingAnimation from "../animations/loading.json";
import successAnimation from "../animations/success.json";
import levelUpAnimation from "../animations/level-up.json";
import achievementAnimation from "../animations/achievement.json";
import { Tooltip } from 'react-tooltip';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { Line, Bar, Radar, Doughnut } from 'react-chartjs-2';
import ChartDataLabels from 'chartjs-plugin-datalabels';
import { Chart, registerables } from 'chart.js';
Chart.register(...registerables, ChartDataLabels);

/**
 * @fileoverview Page principale de l'application NourRise
 * Cette application aide les utilisateurs √† d√©velopper leurs habitudes positives
 * en utilisant des techniques de gamification et des syst√®mes de r√©compense 
 * psychologiquement optimis√©s pour favoriser l'engagement et la pers√©v√©rance.
 * 
 * @author NourRise Team
 * @version 2.0.0
 */

// ===== CONSTANTES SYST√àME =====
// R√©compenses et syst√®mes de motivation avanc√©s bas√©s sur la psychologie comportementale
const RECOMPENSES_VARIABLES = {
  BONUS_SURPRISE: [10, 20, 50, 100], // Valeurs possibles pour les bonus al√©atoires
  MULTIPLICATEURS: [1.5, 2, 3],      // Multiplicateurs de points possibles
  COMBO_REQUIS: [3, 5, 7, 10],       // Nombre de t√¢ches cons√©cutives pour d√©clencher un combo
  POWER_HOURS: {
    MATIN: { debut: 5, fin: 8, multiplicateur: 2, nom: "Bonus Fajr", 
            description: "Profite de l'aube pour multiplier tes bienfaits" },
    SOIREE: { debut: 21, fin: 23, multiplicateur: 1.5, nom: "Bonus R√©flexion", 
             description: "Le calme du soir pour finir la journ√©e en beaut√©" },
    MIDI: { debut: 12, fin: 14, multiplicateur: 1.3, nom: "Boost D√©jeuner", 
           description: "Utilise ta pause repas efficacement" }
  },
  // Intervalles d'activation de r√©compenses al√©atoires (en jours)
  INTERVALLE_RECOMPENSES: {
    MIN: 3,
    MAX: 7
  }
};

// Syst√®me de progression par niveaux avec avantages exclusifs
const NIVEAUX = [
  { niveau: 1, nom: "D√©butant", requis: 0, couleur: "from-blue-400 to-blue-600", icone: "üå±", 
    motivation: "Le d√©but d'un beau voyage...", bonus: "D√©bloquez plus de t√¢ches !", medaille: "ü•â",
    avantages: ["Acc√®s aux t√¢ches de base", "Statistiques journali√®res"], couleurTexte: "text-blue-400" },
  { niveau: 2, nom: "Apprenti", requis: 100, couleur: "from-green-400 to-green-600", icone: "üåø", 
    motivation: "Tu progresses bien !", bonus: "Acc√®s aux d√©fis quotidiens", medaille: "ü•à",
    avantages: ["D√©fis quotidiens", "Bonus de combo (√ó1.2)"], couleurTexte: "text-green-400"  },
  { niveau: 3, nom: "Initi√©", requis: 300, couleur: "from-yellow-400 to-yellow-600", icone: "‚≠ê", 
    motivation: "Ta pers√©v√©rance paie !", bonus: "Multiplicateur de points √ó1.5", medaille: "ü•á",
    avantages: ["Multiplicateur de points √ó1.5", "Statistiques avanc√©es"], couleurTexte: "text-yellow-400" },
  { niveau: 4, nom: "Expert", requis: 600, couleur: "from-purple-400 to-purple-600", icone: "üí´", 
    motivation: "Tu deviens une source d'inspiration !", bonus: "D√©bloquez les achievements sp√©ciaux", medaille: "üèÜ",
    avantages: ["Achievements sp√©ciaux", "Bonus de streak am√©lior√©"], couleurTexte: "text-purple-400" },
  { niveau: 5, nom: "Ma√Ætre", requis: 1000, couleur: "from-red-400 to-red-600", icone: "üåü", 
    motivation: "Tu es exceptionnel !", bonus: "Mode Mentor d√©bloqu√©", medaille: "üëë",
    avantages: ["Mode Mentor", "D√©fis de groupe", "Badges exclusifs"], couleurTexte: "text-red-400" },
  { niveau: 6, nom: "L√©gende", requis: 2000, couleur: "from-pink-400 to-pink-600", icone: "üî±", 
    motivation: "Tu es une v√©ritable l√©gende !", bonus: "Personnalisation compl√®te", medaille: "‚≠ê",
    avantages: ["Personnalisation compl√®te", "Acc√®s anticip√© aux nouvelles fonctionnalit√©s"], couleurTexte: "text-pink-400" }
];

// Syst√®me de cat√©gorisation des t√¢ches avec th√©matiques visuelles et motivationnelles
const CATEGORIES = {
  TOUS: { 
    nom: "Tous", 
    icone: "üìã", 
    couleur: "bg-gray-100 text-gray-800",
    theme: "bg-gray-500",
    description: "Toutes les cat√©gories",
    motivation: "Vue d'ensemble de ta progression",
    iconeComponent: <FiStar className="text-gray-600" />
  },
  SPIRITUEL: { 
    nom: "Spirituel", 
    icone: "üïå", 
    couleur: "bg-purple-100 text-purple-800",
    theme: "bg-purple-500",
    description: "√âl√©vation spirituelle",
    motivation: "Nourris ton √¢me",
    iconeComponent: <FiHeart className="text-purple-600" />
  },
  SPORT: { 
    nom: "Sport", 
    icone: "üí™", 
    couleur: "bg-green-100 text-green-800",
    theme: "bg-green-500",
    description: "Sant√© physique",
    motivation: "Prends soin de ton corps",
    iconeComponent: <FiActivity className="text-green-600" />
  },
  EDUCATION: { 
    nom: "√âducation", 
    icone: "üìö", 
    couleur: "bg-blue-100 text-blue-800",
    theme: "bg-blue-500",
    description: "D√©veloppement intellectuel",
    motivation: "Cultive ton esprit",
    iconeComponent: <FiBookmark className="text-blue-600" />
  },
  DEVELOPPEMENT: { 
    nom: "D√©veloppement", 
    icone: "üöÄ", 
    couleur: "bg-yellow-100 text-yellow-800",
    theme: "bg-yellow-500",
    description: "Croissance personnelle",
    motivation: "Deviens meilleur chaque jour",
    iconeComponent: <FiTrendingUp className="text-yellow-600" />
  },
  SOCIAL: { 
    nom: "Social", 
    icone: "üë•", 
    couleur: "bg-red-100 text-red-800",
    theme: "bg-red-500",
    description: "Relations sociales",
    motivation: "Cultive des relations significatives",
    iconeComponent: <FiShare2 className="text-red-600" />
  }
};

// Citations motivationnelles dynamiques pour l'inspiration quotidienne
const CITATIONS = [
  { texte: "Chaque petit progr√®s te rapproche de tes objectifs", auteur: "NourRise", categorie: "MOTIVATION" },
  { texte: "La constance est la cl√© du succ√®s", auteur: "NourRise", categorie: "CONSTANCE" },
  { texte: "Un pas √† la fois, mais toujours en avant", auteur: "NourRise", categorie: "PROGRESSION" },
  { texte: "La discipline est le pont entre les objectifs et leur r√©alisation", auteur: "NourRise", categorie: "DISCIPLINE" },
  { texte: "Le succ√®s se construit chaque jour", auteur: "NourRise", categorie: "QUOTIDIEN" },
  { texte: "Ta d√©termination fa√ßonne ton destin", auteur: "NourRise", categorie: "DETERMINATION" },
  { texte: "L'excellence est un art qui s'acquiert par l'entra√Ænement", auteur: "NourRise", categorie: "EXCELLENCE" },
  { texte: "Chaque difficult√© rencontr√©e est une opportunit√© de croissance", auteur: "NourRise", categorie: "RESILIENCE" },
  { texte: "Ce n'est pas le temps qui compte, mais l'intention dans chaque action", auteur: "NourRise", categorie: "INTENTION" },
  { texte: "Vise les √©toiles, tu atteindras au moins la lune", auteur: "NourRise", categorie: "AMBITION" },
  { texte: "La patience est am√®re, mais ses fruits sont doux", auteur: "NourRise", categorie: "PATIENCE" },
  { texte: "Celui qui d√©place une montagne commence par d√©placer de petites pierres", auteur: "Confucius", categorie: "PERSEVERANCE" },
  { texte: "La meilleure fa√ßon de pr√©dire l'avenir est de le cr√©er", auteur: "Peter Drucker", categorie: "VISION" },
  { texte: "Votre temps est limit√©, alors ne le gaspillez pas √† vivre la vie de quelqu'un d'autre", auteur: "Steve Jobs", categorie: "AUTHENTICITE" },
  { texte: "Le succ√®s, c'est d'aller d'√©chec en √©chec sans perdre son enthousiasme", auteur: "Winston Churchill", categorie: "PERSEVERANCE" }
];

// Messages de succ√®s personnalis√©s pour renforcer la motivation
const SUCCES_MESSAGES = [
  "Excellente r√©alisation ! üåü",
  "Continue sur cette lanc√©e ! üöÄ",
  "Tu es sur la bonne voie ! üéØ",
  "Impressionnant ! üí´",
  "Tu progresses admirablement ! ‚≠ê",
  "Quelle pers√©v√©rance ! üí™",
  "C'est extraordinaire ! üéâ",
  "Une r√©ussite de plus ! üåà",
  "Incroyable effort ! üî•",
  "Tu as d√©pass√© les attentes ! üèÜ",
  "Performance remarquable ! ‚ú®",
  "Quelle d√©termination ! üå†",
  "Un pas de plus vers l'excellence ! üåÖ",
  "Ton engagement inspire ! üíé",
  "La constance paie toujours ! üåä",
  "D√©fi relev√© avec brio ! üèÖ"
];

// Motifs et r√©compenses pour fid√©lit√© qui se d√©bloquent progressivement
const RECOMPENSES_FIDELITE = [
  { jours: 7, nom: "Semaine Constante", icone: "üåü", points: 50, description: "Une semaine compl√®te d'engagement !" },
  { jours: 21, nom: "Habitude Form√©e", icone: "‚ö°", points: 150, description: "21 jours forment une habitude durable" },
  { jours: 30, nom: "Mois d'Excellence", icone: "üåô", points: 200, description: "Un mois de transformation" },
  { jours: 66, nom: "Ma√Ætre du Changement", icone: "üî•", points: 300, description: "66 jours pour changer profond√©ment" },
  { jours: 100, nom: "Centenaire", icone: "üíØ", points: 500, description: "Une d√©termination exceptionnelle" },
  { jours: 365, nom: "R√©volution Annuelle", icone: "üåç", points: 1000, description: "Un an de transformation continue" }
];

// Badges et troph√©es d√©bloquables pour stimuler la progression
const BADGES = [
  { id: "early_riser", nom: "L√®ve-t√¥t", icone: "üåÖ", condition: "Compl√©ter 5 t√¢ches avant 8h", difficulte: 1 },
  { id: "night_owl", nom: "Noctambule Productif", icone: "üåÉ", condition: "Compl√©ter 5 t√¢ches apr√®s 22h", difficulte: 1 },
  { id: "combo_master", nom: "Ma√Ætre des Combos", icone: "üîÑ", condition: "Atteindre un combo de 10", difficulte: 2 },
  { id: "perfect_week", nom: "Semaine Parfaite", icone: "üìÖ", condition: "100% de t√¢ches compl√©t√©es pendant 7 jours", difficulte: 3 },
  { id: "spiritual_seeker", nom: "Chercheur Spirituel", icone: "‚ú®", condition: "Compl√©ter 50 t√¢ches spirituelles", difficulte: 2 },
  { id: "knowledge_hunter", nom: "Chasseur de Savoir", icone: "üìö", condition: "Compl√©ter 50 t√¢ches √©ducatives", difficulte: 2 },
  { id: "fitness_guru", nom: "Guru du Fitness", icone: "üí™", condition: "Compl√©ter 50 t√¢ches sportives", difficulte: 2 },
  { id: "growth_adept", nom: "Adepte de la Croissance", icone: "üå±", condition: "Compl√©ter 50 t√¢ches de d√©veloppement", difficulte: 2 },
  { id: "balanced_soul", nom: "√Çme √âquilibr√©e", icone: "‚òØÔ∏è", condition: "Compl√©ter des t√¢ches dans toutes les cat√©gories pendant 10 jours", difficulte: 3 },
  { id: "consistency_king", nom: "Roi de la Constance", icone: "üëë", condition: "Maintenir un streak de 30 jours", difficulte: 4 },
  { id: "comeback_kid", nom: "Champion du Retour", icone: "üîô", condition: "Reprendre apr√®s une interruption de streak", difficulte: 1 },
  { id: "dawn_seeker", nom: "Chercheur de l'Aube", icone: "üåÑ", condition: "Compl√©ter 20 t√¢ches pendant le bonus Fajr", difficulte: 3 },
  { id: "social_butterfly", nom: "Papillon Social", icone: "ü¶ã", condition: "Compl√©ter 30 t√¢ches sociales", difficulte: 2 },
  { id: "reflection_master", nom: "Ma√Ætre de la R√©flexion", icone: "üß†", condition: "Noter ses r√©flexions pendant 20 jours", difficulte: 3 }
];

// T√¢ches journali√®res par d√©faut avec d√©tails enrichis
const tachesJournalieresInitiales = [
  // Cat√©gorie SPIRITUEL
  { 
    nom: "Coran", 
    coef: 5, 
    categorie: "SPIRITUEL", 
    points: 50,
    description: "Lecture et m√©ditation du Coran",
    conseils: ["Choisis un moment calme", "Commence par une courte sourate", "R√©fl√©chis au sens"],
    bonus: { type: "MULTIPLICATEUR", valeur: 2, condition: "avant_fajr" },
    tempsEstime: "15-30 min",
    bienfaits: ["Guidance spirituelle", "Paix int√©rieure", "Connexion avec Allah"]
  },
  { 
    nom: "Dou'a matin et soir", 
    coef: 5, 
    categorie: "SPIRITUEL", 
    points: 50,
    description: "Invocations quotidiennes pour la protection",
    rappel: true,
    heures: ["05:00", "19:00"],
    tempsEstime: "5-10 min",
    bienfaits: ["Protection spirituelle", "Renforcement de la foi", "Reconnaissance envers Allah"]
  },
  { 
    nom: "Pri√®re √† l'heure", 
    coef: 5, 
    categorie: "SPIRITUEL", 
    points: 60,
    description: "Accomplir les pri√®res obligatoires √† l'heure",
    rappel: true,
    conseils: ["Pr√©pare-toi quelques minutes avant", "Trouve un endroit calme", "Concentre-toi pleinement"],
    tempsEstime: "Variable",
    bienfaits: ["Connexion spirituelle", "Discipline", "Purification de l'√¢me"]
  },
  // Cat√©gorie √âDUCATION
  { 
    nom: "Lecture enrichissante", 
    coef: 4, 
    categorie: "EDUCATION", 
    points: 40,
    description: "Lecture d'un livre √©ducatif ou inspirant",
    conseils: ["Choisis un sujet qui t'int√©resse", "Prends des notes", "R√©fl√©chis aux concepts cl√©s"],
    tempsEstime: "30 min",
    bienfaits: ["D√©veloppement intellectuel", "Acquisition de connaissances", "Stimulation cognitive"]
  },
  { 
    nom: "Apprentissage d'une nouvelle comp√©tence", 
    coef: 4, 
    categorie: "EDUCATION", 
    points: 45,
    description: "Consacrer du temps √† l'apprentissage d'une nouvelle comp√©tence",
    tempsEstime: "30-60 min",
    bienfaits: ["D√©veloppement personnel", "Adaptabilit√©", "Confiance en soi"]
  },
  // Cat√©gorie SPORT
  { 
    nom: "Exercice physique", 
    coef: 4, 
    categorie: "SPORT", 
    points: 40,
    description: "Au moins 30 minutes d'activit√© physique",
    conseils: ["Choisis une activit√© que tu aimes", "Commence doucement", "Sois r√©gulier"],
    tempsEstime: "30-45 min",
    bienfaits: ["Sant√© cardiovasculaire", "Renforcement musculaire", "Lib√©ration d'endorphines"]
  },
  { 
    nom: "Marche quotidienne", 
    coef: 3, 
    categorie: "SPORT", 
    points: 30,
    description: "Marcher au moins 10 000 pas",
    tempsEstime: "Variable",
    bienfaits: ["Sant√© cardiovasculaire", "Clart√© mentale", "Gestion du stress"]
  },
  // Cat√©gorie D√âVELOPPEMENT
  { 
    nom: "M√©ditation", 
    coef: 3, 
    categorie: "DEVELOPPEMENT", 
    points: 30,
    description: "M√©ditation consciente pour la clart√© mentale",
    conseils: ["Trouve un endroit calme", "Respire profond√©ment", "Reste dans le moment pr√©sent"],
    tempsEstime: "10-20 min",
    bienfaits: ["R√©duction du stress", "Clart√© mentale", "Meilleure concentration"]
  },
  { 
    nom: "Journal de gratitude", 
    coef: 2, 
    categorie: "DEVELOPPEMENT", 
    points: 25,
    description: "Noter 3 choses pour lesquelles tu es reconnaissant",
    tempsEstime: "5-10 min",
    bienfaits: ["Attitude positive", "Appr√©ciation", "Perspective √©quilibr√©e"]
  },
  // Cat√©gorie SOCIAL
  { 
    nom: "Acte de gentillesse", 
    coef: 3, 
    categorie: "SOCIAL", 
    points: 35,
    description: "Faire quelque chose de gentil pour quelqu'un",
    tempsEstime: "Variable",
    bienfaits: ["Connexion sociale", "Satisfaction personnelle", "Impact positif"]
  },
  { 
    nom: "Maintenir les liens familiaux", 
    coef: 4, 
    categorie: "SOCIAL", 
    points: 40,
    description: "Passer du temps de qualit√© avec la famille ou appeler des proches",
    tempsEstime: "15-60 min",
    bienfaits: ["Renforcement des liens", "Soutien √©motionnel", "Sentiment d'appartenance"]
  }
].map(t => ({ 
  ...t, 
  etat: "", 
  completed: false,
  derniere_realisation: null,
  streak: 0,
  meilleur_streak: 0,
  id: `task-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
}));

/**
 * Composant principal de l'application NourRise
 * G√®re l'affichage et la logique de l'application de d√©veloppement personnel
 */
export default function Home() {
  // ===== √âTATS PRINCIPAUX =====
  // √âtats de base pour l'utilisateur et les donn√©es
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [loadingAction, setLoadingAction] = useState(false);
  const [taches, setTaches] = useState([]);
  const [historique, setHistorique] = useState([]);
  const router = useRouter();

  // √âtats pour les fonctionnalit√©s et l'affichage
  const [niveau, setNiveau] = useState(1);
  const [points, setPoints] = useState(0);
  const [pointsJour, setPointsJour] = useState(0);
  const [streak, setStreak] = useState(0);
  const [notification, setNotification] = useState(null);
  const [citationDuJour, setCitationDuJour] = useState(null);
  const [categorieActive, setCategorieActive] = useState("TOUS");
  const [achievements, setAchievements] = useState([]);
  const [badges, setBadges] = useState([]);
  const [statsCategories, setStatsCategories] = useState({});
  const [showConfetti, setShowConfetti] = useState(false);
  const [combo, setCombo] = useState(0);
  const [dernierCombo, setDernierCombo] = useState(null);
  const [bonusActif, setBonusActif] = useState(null);
  const [defisJour, setDefisJour] = useState([]);
  const [modeNuit, setModeNuit] = useState(false);
  const [vueHistorique, setVueHistorique] = useState('liste'); // 'liste' ou 'calendrier'
  const [afficherDetailsJournee, setAfficherDetailsJournee] = useState(false);
  const [journeeSelectionnee, setJourneeSelectionnee] = useState(null);
  const [animationSuccess, setAnimationSuccess] = useState(false);
  const [tachesFiltrees, setTachesFiltrees] = useState([]);
  const [filtreRecherche, setFiltreRecherche] = useState("");
  const [synchronisationActive, setSynchronisationActive] = useState(false);
  const [dateStats, setDateStats] = useState(new Date());
  const [modeProfil, setModeProfil] = useState(false);
  const [alerteNouvelleFonctionnalite, setAlerteNouvelleFonctionnalite] = useState(true);
  
  // √âtat pour la modal d'ajout de t√¢che
  const [showModal, setShowModal] = useState(false);
  const [nouvelleTache, setNouvelleTache] = useState({
    id: `task-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
    nom: "",
    coef: 3,
    categorie: "SPIRITUEL",
    points: 30,
    description: "",
    conseils: [],
    tempsEstime: "15-30 min",
    bienfaits: []
  });

  // √âtat pour le tutoriel et l'onboarding
  const [tutorielActif, setTutorielActif] = useState(false);
  const [etapeTutoriel, setEtapeTutoriel] = useState(0);

  // √âtats avanc√©s pour les fonctionnalit√©s premium
  const [planPersonnalise, setPlanPersonnalise] = useState(null);
  const [suggestionsPersonnalisees, setSuggestionsPersonnalisees] = useState([]);
  const [statistiquesDetaillees, setStatistiquesDetaillees] = useState({});
  const [objectifsLongTerme, setObjectifsLongTerme] = useState([]);
  const [journalReflexion, setJournalReflexion] = useState([]);

  // R√©f√©rences pour les animations et interactions
  const confettiRef = useRef(null);
  const chartRef = useRef(null);
  const calendarRef = useRef(null);
  const modalRef = useRef(null);
  const progressBarRef = useRef(null);
  const tutorielRef = useRef(null);

  // ===== EFFETS ET INITIALISATION =====
  
  // Effet d'initialisation - V√©rification de la session utilisateur
  useEffect(() => {
    const verifierSession = async () => {
      try {
        setLoading(true);
        const { data: { session } } = await supabase.auth.getSession();
        
        if (!session) {
          router.push("/connexion");
          return;
        }
        
        setUser(session.user);
        
        // Charger les pr√©f√©rences utilisateur depuis Supabase
        const { data: preferences } = await supabase
          .from('preferences_utilisateurs')
          .select('*')
          .eq('user_id', session.user.id)
          .single();
        
        // Appliquer les pr√©f√©rences si elles existent
        if (preferences) {
          setModeNuit(preferences.mode_nuit || false);
          
          // Autres pr√©f√©rences personnalis√©es
          if (preferences.categories_favorites) {
            setCategorieActive(preferences.categories_favorites[0] || "TOUS");
          }
          
          // V√©rifier si l'utilisateur a d√©j√† vu le tutoriel
          if (preferences.tutoriel_complete === false) {
            setTutorielActif(true);
          }
        }
        
        await initialiserJournee(session.user.id);
      } catch (error) {
        console.error('Erreur de session:', error);
        toast.error("Erreur d'authentification. Veuillez vous reconnecter.");
        router.push("/connexion");
      } finally {
        setLoading(false);
      }
    };
    
    verifierSession();
    
    // √âcouter les changements d'authentification
    const { data: authListener } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (event === 'SIGNED_OUT') {
          router.push("/connexion");
        } else if (event === 'SIGNED_IN' && session) {
          setUser(session.user);
          await initialiserJournee(session.user.id);
        }
      }
    );
    
    return () => {
      authListener?.subscription?.unsubscribe();
    };
  }, []);

  // Effet pour la v√©rification des heures bonus - v√©rifie chaque minute
  useEffect(() => {
    const interval = setInterval(() => {
      verifierHeureBonus();
    }, 60000); // V√©rifier chaque minute
    
    // V√©rification initiale
    verifierHeureBonus();
    
    return () => clearInterval(interval);
  }, []);

  // Effet pour lancer le confetti lorsque showConfetti devient true
  useEffect(() => {
    if (showConfetti && confettiRef.current) {
      lancerConfetti();
      // R√©initialiser apr√®s 2 secondes
      setTimeout(() => setShowConfetti(false), 2000);
    }
  }, [showConfetti]);

  // Effet pour filtrer les t√¢ches en fonction de la cat√©gorie active et du filtre de recherche
  useEffect(() => {
    const filtrerTaches = () => {
      let filtered = [...taches];
      
      // Filtrer par cat√©gorie
      if (categorieActive !== "TOUS") {
        filtered = filtered.filter(t => t.categorie === categorieActive);
      }
      
      // Filtrer par recherche
      if (filtreRecherche.trim() !== "") {
        const searchTerm = filtreRecherche.toLowerCase();
        filtered = filtered.filter(t => 
          t.nom.toLowerCase().includes(searchTerm) || 
          (t.description && t.description.toLowerCase().includes(searchTerm))
        );
      }
      
      setTachesFiltrees(filtered);
    };
    
    filtrerTaches();
  }, [taches, categorieActive, filtreRecherche]);

  // Effet pour v√©rifier les r√©alisations de badges apr√®s chaque action
  useEffect(() => {
    if (user && taches.length > 0 && historique.length > 0) {
      verifierBadges();
    }
  }, [taches, historique, user]);

  // Effet pour sauvegarder p√©riodiquement les donn√©es en cas de fermeture accidentelle
  useEffect(() => {
    const intervalSauvegarde = setInterval(() => {
      if (user && taches.length > 0) {
        sauvegarderProgressionLocale();
      }
    }, 60000); // Sauvegarde toutes les minutes
    
    return () => clearInterval(intervalSauvegarde);
  }, [user, taches]);

  // ===== FONCTIONS UTILITAIRES =====
  
  /**
   * Lance l'effet de confettis pour c√©l√©brer les r√©ussites
   * @param {Object} options - Options de configuration des confettis
   */
  const lancerConfetti = (options = {}) => {
    const config = {
      particleCount: 100,
      spread: 70,
      origin: { y: 0.6 },
      colors: ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#FF00FF', '#00FFFF'],
      ...options
    };
    
    confetti(config);
    
    // Pour un effet plus impressionnant, lancer plusieurs vagues
    setTimeout(() => {
      confetti({
        ...config,
        particleCount: 50,
        angle: 60,
        spread: 55,
      });
    }, 200);
    
    setTimeout(() => {
      confetti({
        ...config,
        particleCount: 50,
        angle: 120,
        spread: 55
      });
    }, 400);
  };
  
  /**
   * Formatte une date pour l'affichage en fran√ßais
   * @param {Date} date - La date √† formater
   * @param {string} formatStr - Le format de date souhait√©
   * @returns {string} - La date format√©e
   */
  const formatDate = (date, formatStr = 'dd MMMM yyyy') => {
    return format(new Date(date), formatStr, { locale: fr });
  };

  /**
   * Sauvegarde la progression dans le stockage local en cas de probl√®me
   */
  const sauvegarderProgressionLocale = () => {
    try {
      localStorage.setItem('nourrise_taches', JSON.stringify(taches));
      localStorage.setItem('nourrise_derniere_sauvegarde', new Date().toISOString());
    } catch (error) {
      console.error('Erreur lors de la sauvegarde locale:', error);
    }
  };

  /**
   * Restaure la progression depuis le stockage local si disponible
   */
  const restaurerProgressionLocale = () => {
    try {
      const tachesSauvegardees = localStorage.getItem('nourrise_taches');
      const derniereSauvegarde = localStorage.getItem('nourrise_derniere_sauvegarde');
      
      if (tachesSauvegardees && derniereSauvegarde) {
        const dateRestoration = new Date(derniereSauvegarde);
        const maintenant = new Date();
        
        // Ne restaurer que si la sauvegarde est r√©cente (moins de 24h)
        if (Math.abs(maintenant - dateRestoration) < 24 * 60 * 60 * 1000) {
          setTaches(JSON.parse(tachesSauvegardees));
          toast.info("Progression pr√©c√©dente restaur√©e");
          return true;
        }
      }
      return false;
    } catch (error) {
      console.error('Erreur lors de la restauration locale:', error);
      return false;
    }
  };

  /**
   * G√©n√®re un identifiant unique pour les t√¢ches et autres √©l√©ments
   * @returns {string} - Un identifiant unique
   */
  const genererID = () => {
    return `id-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  };

  // ===== FONCTIONS DE CHARGEMENT ET D'INITIALISATION =====
  
  /**
   * Charge l'historique des activit√©s de l'utilisateur depuis Supabase
   * @param {string} userId - L'identifiant de l'utilisateur
   */
  const chargerHistorique = async (userId) => {
    try {
      setLoadingAction(true);
      
      // Requ√™te √† Supabase pour r√©cup√©rer l'historique
      const { data, error } = await supabase
        .from('historique')
        .select('*')
        .eq('user_id', userId)
        .order('date', { ascending: false });
      
      if (error) {
        throw new Error(`Erreur Supabase: ${error.message}`);
      }
      
      // Mettre √† jour l'√©tat avec les donn√©es r√©cup√©r√©es
      setHistorique(data || []);
      
      // Mise √† jour du streak si on a des donn√©es
      if (data && data.length > 0) {
        // V√©rifier si la derni√®re entr√©e est d'aujourd'hui ou d'hier
        const dernierJour = new Date(data[0].date);
        const aujourdhui = new Date();
        const hier = new Date();
        hier.setDate(hier.getDate() - 1);
        
        // V√©rifier la continuit√© du streak
        if (isSameDay(dernierJour, aujourdhui)) {
          // Journ√©e d√©j√† valid√©e aujourd'hui
          setStreak(data[0].streak || 0);
        } else if (isSameDay(dernierJour, hier)) {
          // Continuit√© du streak d'hier
          setStreak(data[0].streak || 0);
        } else {
          // Interruption du streak
          setStreak(0);
        }
      }

      // Charger les points et calculer les statistiques
      if (data && data.length > 0) {
        const pointsTotaux = data.reduce((acc, jour) => acc + (jour.points || 0), 0);
        setPoints(pointsTotaux);
        
        // Mettre √† jour le niveau
        calculerNiveau(pointsTotaux);
        
        // Calculer les statistiques par cat√©gorie
        calculerStatistiquesCategories(data);
      }
      
      return data;
    } catch (error) {
      console.error('Erreur lors du chargement de l\'historique:', error);
      toast.error("Erreur lors du chargement de l'historique");
      setHistorique([]);
      return [];
    } finally {
      setLoadingAction(false);
    }
  };

  /**
   * Charge les succ√®s (achievements) de l'utilisateur depuis Supabase
   */
  const chargerAchievements = async () => {
    if (!user) return;
    
    try {
      setLoadingAction(true);
      
      // R√©cup√©rer les achievements depuis Supabase
      const { data, error } = await supabase
        .from('achievements')
        .select('*')
        .eq('user_id', user.id);
      
      if (error) {
        throw new Error(`Erreur Supabase: ${error.message}`);
      }
      
      setAchievements(data || []);
      
      // Charger √©galement les badges
      const { data: badgesData, error: badgesError } = await supabase
        .from('badges')
        .select('*')
        .eq('user_id', user.id);
      
      if (badgesError) {
        throw new Error(`Erreur Supabase: ${badgesError.message}`);
      }
      
      setBadges(badgesData || []);
      
    } catch (error) {
      console.error('Erreur lors du chargement des achievements:', error);
      toast.error("Erreur lors du chargement des succ√®s");
      setAchievements([]);
      setBadges([]);
    } finally {
      setLoadingAction(false);
    }
  };

  /**
   * G√©n√®re les d√©fis quotidiens pour l'utilisateur
   */
  const genererDefisQuotidiens = () => {
    // V√©rifier s'il y a des t√¢ches sauvegard√©es localement
    const restaurationReussie = restaurerProgressionLocale();
    
    if (!restaurationReussie) {
      // Si pas de restauration, g√©n√©rer les t√¢ches initiales
      const tachesNonCompletees = tachesJournalieresInitiales.map(t => ({
        ...t,
        id: genererID(),
        derniere_realisation: null
      }));
      
      setTaches(tachesNonCompletees);
    }
    
    // G√©n√©rer des d√©fis suppl√©mentaires en fonction du niveau
    if (niveau >= 2) {
      const defisJournaliers = genererDefisPersonnalises(niveau);
      setDefisJour(defisJournaliers);
    }
  };

  /**
   * G√©n√®re des d√©fis personnalis√©s en fonction du niveau de l'utilisateur
   * @param {number} niveauUtilisateur - Le niveau actuel de l'utilisateur
   * @returns {Array} - Les d√©fis personnalis√©s
   */
  const genererDefisPersonnalises = (niveauUtilisateur) => {
    const defis = [];
    
    // G√©n√©rer des d√©fis en fonction du niveau
    if (niveauUtilisateur >= 2) {
      defis.push({
        id: genererID(),
        titre: "Combo du jour",
        description: "Compl√®te 3 t√¢ches √† la suite sans interruption",
        recompense: 30,
        icone: "üîÑ",
        complete: false
      });
    }
    
    if (niveauUtilisateur >= 3) {
      defis.push({
        id: genererID(),
        titre: "√âquilibre parfait",
        description: "Compl√®te au moins une t√¢che dans chaque cat√©gorie",
        recompense: 50,
        icone: "‚öñÔ∏è",
        complete: false
      });
    }
    
    if (niveauUtilisateur >= 4) {
      defis.push({
        id: genererID(),
        titre: "D√©fi du mentor",
        description: "Aide un autre utilisateur ou partage ton exp√©rience",
        recompense: 70,
        icone: "üß†",
        complete: false
      });
    }
    
    return defis;
  };

  /**
   * Affiche une notification √† l'utilisateur
   * @param {string} message - Le message √† afficher
   * @param {string} type - Le type de notification (info, success, error, achievement)
   */
  const afficherNotification = (message, type = 'info') => {
    // Afficher la notification dans l'interface
    setNotification({ message, type });
    setTimeout(() => setNotification(null), 3000);
    
    // Utiliser √©galement react-toastify pour des notifications plus riches
    switch (type) {
      case 'success':
        toast.success(message);
        break;
      case 'error':
        toast.error(message);
        break;
      case 'achievement':
        toast.info(message, {
          icon: 'üèÜ',
          className: 'achievement-toast'
        });
        break;
      default:
        toast.info(message);
    }
  };

  /**
   * Initialise la journ√©e avec toutes les donn√©es n√©cessaires
   * @param {string} userId - L'identifiant de l'utilisateur
   */
  const initialiserJournee = async (userId) => {
    try {
      setLoading(true);
      
      // Charger les donn√©es principales
      const historiqueData = await chargerHistorique(userId);
      
      // V√©rifier si la journ√©e a d√©j√† √©t√© initialis√©e aujourd'hui
      const aujourdhui = new Date();
      const journeeDejaInitialisee = historiqueData?.some(entry => 
        isSameDay(new Date(entry.date), aujourdhui)
      );
      
      // Si la journ√©e n'a pas encore √©t√© initialis√©e, g√©n√©rer les t√¢ches
      if (!journeeDejaInitialisee) {
        genererDefisQuotidiens();
      } else {
        // Sinon, charger les t√¢ches actuelles depuis la base de donn√©es
        const { data: tachesData, error: tachesError } = await supabase
          .from('taches_jour')
          .select('*')
          .eq('user_id', userId)
          .eq('date', formatDate(aujourdhui, 'yyyy-MM-dd'));
        
        if (tachesError) {
          console.error('Erreur lors du chargement des t√¢ches du jour:', tachesError);
          genererDefisQuotidiens(); // Fallback sur la g√©n√©ration par d√©faut
        } else if (tachesData && tachesData.length > 0) {
          setTaches(tachesData[0].taches || tachesJournalieresInitiales);
          setPointsJour(tachesData[0].points_jour || 0);
        } else {
          genererDefisQuotidiens();
        }
      }
      
      // Initialiser les autres √©l√©ments de la journ√©e
      selectionnerCitationDuJour();
      verifierHeureBonus();
      await chargerAchievements();
      
      // Calculer et mettre √† jour les statistiques
      if (historiqueData && historiqueData.length > 0) {
        calculerStatistiquesCategories(historiqueData);
      }
      
    } catch (error) {
      console.error('Erreur lors de l\'initialisation:', error);
      toast.error("Une erreur est survenue lors de l'initialisation");
      
      // Initialisation minimale en cas d'erreur
      setTaches(tachesJournalieresInitiales);
      selectionnerCitationDuJour();
    } finally {
      setLoading(false);
    }
  };

  /**
   * S√©lectionne une citation du jour al√©atoire
   */
  const selectionnerCitationDuJour = () => {
    // S√©lectionner une citation al√©atoire
    const index = Math.floor(Math.random() * CITATIONS.length);
    setCitationDuJour(CITATIONS[index]);
  };

  /**
   * V√©rifie si l'heure actuelle correspond √† une p√©riode de bonus
   */
  const verifierHeureBonus = () => {
    const maintenant = new Date();
    const heure = maintenant.getHours();
    
    // V√©rifier chaque p√©riode de bonus
    for (const [key, periode] of Object.entries(RECOMPENSES_VARIABLES.POWER_HOURS)) {
      if (heure >= periode.debut && heure < periode.fin) {
        setBonusActif(periode);
        return;
      }
    }
    
    // Aucun bonus actif pour l'heure actuelle
    setBonusActif(null);
  };

  /**
   * Calcule les statistiques par cat√©gorie √† partir de l'historique
   * @param {Array} historiqueData - Les donn√©es d'historique
   */
  const calculerStatistiquesCategories = (historiqueData) => {
    try {
      // Initialiser les statistiques
      const stats = Object.keys(CATEGORIES).reduce((acc, cat) => {
        if (cat !== "TOUS") {
          acc[cat] = { 
            total: 0, 
            complete: 0, 
            points: 0, 
            tauxReussite: 0,
            tendance: 'stable' // 'hausse', 'baisse', 'stable'
          };
        }
        return acc;
      }, {});
      
      // Calculer les statistiques pour chaque entr√©e d'historique
      if (historiqueData && historiqueData.length > 0) {
        // Analyser les 7 derniers jours pour les tendances
        const derniersJours = historiqueData.slice(0, Math.min(7, historiqueData.length));
        
        // Pour chaque jour, analyser les t√¢ches compl√©t√©es par cat√©gorie
        derniersJours.forEach(jour => {
          if (jour.details_taches) {
            Object.entries(jour.details_taches).forEach(([categorie, details]) => {
              if (stats[categorie]) {
                stats[categorie].total += details.total || 0;
                stats[categorie].complete += details.complete || 0;
                stats[categorie].points += details.points || 0;
              }
            });
          }
        });
        
        // Calculer les taux de r√©ussite et tendances
        Object.keys(stats).forEach(categorie => {
          if (stats[categorie].total > 0) {
            stats[categorie].tauxReussite = Math.round((stats[categorie].complete / stats[categorie].total) * 100);
          }
          
          // Analyser la tendance (comparaison avec la semaine pr√©c√©dente)
          if (historiqueData.length > 7) {
            const semainePrecedente = historiqueData.slice(7, Math.min(14, historiqueData.length));
            let completePrecedent = 0;
            let totalPrecedent = 0;
            
            semainePrecedente.forEach(jour => {
              if (jour.details_taches && jour.details_taches[categorie]) {
                completePrecedent += jour.details_taches[categorie].complete || 0;
                totalPrecedent += jour.details_taches[categorie].total || 0;
              }
            });
            
            const tauxPrecedent = totalPrecedent > 0 
              ? (completePrecedent / totalPrecedent) * 100 
              : 0;
            
            const difference = stats[categorie].tauxReussite - tauxPrecedent;
            
            // D√©terminer la tendance
            if (difference > 5) {
              stats[categorie].tendance = 'hausse';
            } else if (difference < -5) {
              stats[categorie].tendance = 'baisse';
            } else {
              stats[categorie].tendance = 'stable';
            }
          }
        });
      }
      
      setStatsCategories(stats);
      
    } catch (error) {
      console.error('Erreur lors du calcul des statistiques par cat√©gorie:', error);
    }
  };

  // ===== FONCTIONS DE GESTION DES POINTS ET PROGRESSION =====
  
  /**
   * Ajoute des points au score de l'utilisateur
   * @param {number} pointsGagnes - Le nombre de points √† ajouter
   * @param {string} source - La source des points (nom de la t√¢che, etc.)
   */
  const ajouterPoints = (pointsGagnes, source = '') => {
    // V√©rifier si un bonus est actif
    let pointsFinaux = pointsGagnes;
    let detailsBonus = '';
    
    // Appliquer bonus d'heure
    if (bonusActif) {
      const bonusHeure = Math.round(pointsGagnes * (bonusActif.multiplicateur - 1));
      pointsFinaux += bonusHeure;
      detailsBonus += `Bonus ${bonusActif.nom}: +${bonusHeure} points\n`;
    }
    
    // Bonus de niveau (√† partir du niveau 3)
    if (niveau >= 3) {
      const bonusNiveau = Math.round(pointsGagnes * 0.25); // +25% au niveau 3+
      pointsFinaux += bonusNiveau;
      detailsBonus += `Bonus niveau ${niveau}: +${bonusNiveau} points\n`;
    }
    
    // Mettre √† jour les points
    setPoints(prev => {
      const nouveauxPoints = prev + pointsFinaux;
      // V√©rifier si on monte de niveau
      calculerNiveau(nouveauxPoints);
      return nouveauxPoints;
    });
    
    setPointsJour(prev => prev + pointsFinaux);
    
    // Message de succ√®s
    const messageSucces = SUCCES_MESSAGES[Math.floor(Math.random() * SUCCES_MESSAGES.length)];
    
    // Message d√©taill√©
    const messageDetail = detailsBonus 
      ? `${messageSucces}\nPoints de base: ${pointsGagnes}\n${detailsBonus}Total: +${pointsFinaux} points` 
      : `${messageSucces} +${pointsFinaux} points`;
    
    afficherNotification(messageDetail, 'success');
    
    // Bonus de combo
    if (combo > 0) {
      // V√©rifier si le combo atteint un seuil pour un bonus
      const comboThreshold = RECOMPENSES_VARIABLES.COMBO_REQUIS.find(seuil => combo % seuil === 0);
      
      if (comboThreshold) {
        const bonusCombo = Math.round(pointsFinaux * 0.5); // 50% de bonus
        setPoints(prev => prev + bonusCombo);
        setPointsJour(prev => prev + bonusCombo);
        
        afficherNotification(`üî• Combo √ó${combo} ! Bonus de +${bonusCombo} points`, 'achievement');
        setShowConfetti(true);
        setAnimationSuccess(true);
        setTimeout(() => setAnimationSuccess(false), 2000);
        
        // V√©rifier si c'est un nouveau record de combo
        if (!dernierCombo || combo > dernierCombo) {
          setDernierCombo(combo);
          
          // Si c'est un combo important, ajouter un achievement
          if (combo >= 5) {
            ajouterAchievement({
              type: 'COMBO',
              titre: `Combo √ó${combo}`,
              description: `Tu as encha√Æn√© ${combo} t√¢ches d'affil√©e !`,
              icone: 'üîÑ',
              date: new Date().toISOString(),
              details: { combo: combo }
            });
          }
        }
      }
    }
    
    // Mettre √† jour la progression dans Supabase
    sauvegarderProgression();
  };

  /**
   * Sauvegarde la progression et les points dans Supabase
   */
  const sauvegarderProgression = async () => {
    if (!user) return;
    
    try {
      setSynchronisationActive(true);
      
      // Mettre √† jour les t√¢ches du jour
      const { error: erreurTaches } = await supabase
        .from('taches_jour')
        .upsert({
          user_id: user.id,
          date: formatDate(new Date(), 'yyyy-MM-dd'),
          taches: taches,
          points_jour: pointsJour
        });
      
      if (erreurTaches) {
        throw new Error(`Erreur lors de la sauvegarde des t√¢ches: ${erreurTaches.message}`);
      }
      
      // Mettre √† jour le profil utilisateur avec le total des points et le niveau
      const { error: erreurProfil } = await supabase
        .from('profils')
        .upsert({
          id: user.id,
          points_total: points,
          niveau: niveau,
          streak: streak,
          dernier_combo: dernierCombo || 0,
          updated_at: new Date().toISOString()
        });
      
      if (erreurProfil) {
        throw new Error(`Erreur lors de la mise √† jour du profil: ${erreurProfil.message}`);
      }
      
    } catch (error) {
      console.error('Erreur lors de la sauvegarde de la progression:', error);
      // Continuer m√™me en cas d'erreur, les donn√©es sont sauvegard√©es localement
    } finally {
      setSynchronisationActive(false);
    }
  };

  /**
   * Calcule le niveau de l'utilisateur en fonction des points
   * @param {number} pointsTotaux - Le nombre total de points de l'utilisateur
   */
  const calculerNiveau = (pointsTotaux) => {
    // D√©terminer le niveau en fonction des points
    for (let i = NIVEAUX.length - 1; i >= 0; i--) {
      if (pointsTotaux >= NIVEAUX[i].requis) {
        if (niveau !== NIVEAUX[i].niveau) {
          // Monter de niveau
          levelUp(NIVEAUX[i].niveau);
        }
        break;
      }
    }
  };

  /**
   * G√®re la mont√©e de niveau avec effets visuels et r√©compenses
   * @param {number} nouveauNiveau - Le nouveau niveau atteint
   */
  const levelUp = (nouveauNiveau) => {
    const ancienNiveau = niveau;
    setNiveau(nouveauNiveau);
    
    // Effets visuels
    setShowConfetti(true);
    setAnimationSuccess(true);
    setTimeout(() => setAnimationSuccess(false), 3000);
    
    // Message de f√©licitations
    const message = `üéâ Niveau ${nouveauNiveau} atteint !\n${NIVEAUX[nouveauNiveau-1].motivation}\n\nNouveau bonus: ${NIVEAUX[nouveauNiveau-1].bonus}`;
    afficherNotification(message, 'achievement');
    
    // Animation sp√©ciale pour la mont√©e de niveau
    // D√©j√† g√©r√©e par animationSuccess
    
    // Ajouter un achievement de niveau
    ajouterAchievement({
      type: 'NIVEAU',
      titre: `Niveau ${nouveauNiveau} - ${NIVEAUX[nouveauNiveau-1].nom}`,
      description: NIVEAUX[nouveauNiveau-1].motivation,
      icone: NIVEAUX[nouveauNiveau-1].icone,
      medaille: NIVEAUX[nouveauNiveau-1].medaille,
      date: new Date().toISOString(),
      details: { 
        niveau: nouveauNiveau,
        niveau_precedent: ancienNiveau
      }
    });
    
    // D√©bloquer de nouvelles fonctionnalit√©s selon le niveau
    if (nouveauNiveau >= 2 && ancienNiveau < 2) {
      // Niveau 2: D√©bloquer les d√©fis quotidiens
      const defisJournaliers = genererDefisPersonnalises(nouveauNiveau);
      setDefisJour(defisJournaliers);
      
      setTimeout(() => {
        afficherNotification("üéØ Nouvelle fonctionnalit√© d√©bloqu√©e: D√©fis quotidiens!", 'info');
      }, 3000);
    }
    
    if (nouveauNiveau >= 3 && ancienNiveau < 3) {
      // Niveau 3: D√©bloquer les statistiques avanc√©es
      setTimeout(() => {
        afficherNotification("üìä Nouvelle fonctionnalit√© d√©bloqu√©e: Statistiques avanc√©es!", 'info');
      }, 4000);
    }
    
    if (nouveauNiveau >= 4 && ancienNiveau < 4) {
      // Niveau 4: D√©bloquer les achievements sp√©ciaux
      setTimeout(() => {
        afficherNotification("üèÜ Nouvelle fonctionnalit√© d√©bloqu√©e: Achievements sp√©ciaux!", 'info');
      }, 5000);
    }
    
    if (nouveauNiveau >= 5 && ancienNiveau < 5) {
      // Niveau 5: D√©bloquer le mode Mentor
      setTimeout(() => {
        afficherNotification("üëë Nouvelle fonctionnalit√© d√©bloqu√©e: Mode Mentor!", 'info');
      }, 6000);
    }
  };

  /**
   * Ajoute un achievement (r√©ussite) √† l'utilisateur
   * @param {Object} achievement - Les d√©tails de l'achievement
   */
  const ajouterAchievement = async (achievement) => {
    if (!user) return;
    
    try {
      // V√©rifier si l'achievement existe d√©j√† pour √©viter les doublons
      const { data: existants, error: erreurVerif } = await supabase
        .from('achievements')
        .select('id')
        .eq('user_id', user.id)
        .eq('type', achievement.type)
        .eq('titre', achievement.titre);
      
      if (erreurVerif) {
        throw new Error(`Erreur lors de la v√©rification des achievements: ${erreurVerif.message}`);
      }
      
      // Ne pas ajouter si d√©j√† existant
      if (existants && existants.length > 0) {
        return;
      }
      
      // Ajouter l'achievement dans Supabase
      const { data, error } = await supabase
        .from('achievements')
        .insert([
          {
            user_id: user.id,
            ...achievement
          }
        ]);
      
      if (error) {
        throw new Error(`Erreur lors de l'ajout d'un achievement: ${error.message}`);
      }
      
      // Recharger les achievements
      await chargerAchievements();
      
      // Notification visuelle
      afficherNotification(`üèÜ Achievement d√©bloqu√©: ${achievement.titre}`, 'achievement');
      setShowConfetti(true);
      
    } catch (error) {
      console.error('Erreur lors de l\'ajout d\'un achievement:', error);
    }
  };

  /**
   * V√©rifie si l'utilisateur a d√©bloqu√© de nouveaux badges
   */
  const verifierBadges = async () => {
    if (!user) return;
    
    try {
      // V√©rifier les badges d√©j√† obtenus
      const badgesActuels = badges.map(b => b.id);
      
      // Pour chaque badge dans la liste
      for (const badge of BADGES) {
        // Si d√©j√† obtenu, passer au suivant
        if (badgesActuels.includes(badge.id)) continue;
        
        // V√©rifier les conditions d'obtention
        let conditionRemplie = false;
        
        switch (badge.id) {
          case 'early_riser': 
            // Compl√©ter 5 t√¢ches avant 8h
            const tachesMatinales = historique.filter(jour => {
              return jour.details_taches && 
                     Object.values(jour.details_taches).some(cat => 
                       cat.taches_matinales && cat.taches_matinales >= 1
                     );
            }).length;
            conditionRemplie = tachesMatinales >= 5;
            break;
            
          case 'night_owl':
            // Compl√©ter 5 t√¢ches apr√®s 22h
            const tachesNocturnes = historique
